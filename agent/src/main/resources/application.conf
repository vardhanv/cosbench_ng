# REMOTE



# Akka logging
Slave {

akka {

	# Logging configuration
	#log-config-on-start = on
 	loggers = ["akka.event.slf4j.Slf4jLogger"]
  	loglevel = "DEBUG"
  	logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  	
  	log-dead-letters = 10
  	log-dead-letters-during-shutdown = on


  	#stream.materializer.initial-input-buffer-size = 1
    #stream.materializer.max-input-buffer-size = 1
    
	actor {
		  provider = cluster
		  
		  # required only during testing
		  # see http://doc.akka.io/docs/akka/2.4/scala/serialization.html#serialization-scala
		  # serialize-messages = on
		  # serialize-creators = on
	
		  allow-java-serialization = on
		  warn-about-java-serializer-usage = on
		  
		  
		  debug {
		    receive = off
		    autoreceive = off
		    lifecycle = off
		    fsm = off
		    event-stream = off
		    unhandled = off
		    router-misconfiguration = on
		  }
	  
			# from http://doc.akka.io/docs/akka/snapshot/scala/general/configuration.html#config-akka-remote
		    serializers {
		      akka-containers = "akka.remote.serialization.MessageContainerSerializer"
		      akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
      	      myCmd   = "cosbench_ng.MyCmdSerializer"

		      
		      akka-misc = "akka.remote.serialization.MiscMessageSerializer"
		      artery = "akka.remote.serialization.ArteryMessageSerializer"
		      proto = "akka.remote.serialization.ProtobufSerializer"
		      daemon-create = "akka.remote.serialization.DaemonMsgCreateSerializer"
		      primitive-long = "akka.remote.serialization.LongSerializer"
		      primitive-int = "akka.remote.serialization.IntSerializer"
		      primitive-string = "akka.remote.serialization.StringSerializer"
		      primitive-bytestring = "akka.remote.serialization.ByteStringSerializer"
		      akka-system-msg = "akka.remote.serialization.SystemMessageSerializer"
		    }
		
		    serialization-bindings {
      	      "MyProtoBufMsg.MyCmd" = myCmd
      	      "MyProtoBufMsg.StatListMsg" = myCmd
	          "MyProtoBufMsg.GoodStatMsg" = myCmd
	          "MyProtoBufMsg.BadStatMsg" = myCmd
	          "MyProtoBufMsg.SlaveStatusMsg" = myCmd
      	      
		    
		      "akka.actor.ActorSelectionMessage" = akka-containers	
		      "akka.remote.DaemonMsgCreate" = daemon-create
		      "akka.remote.artery.ArteryMessage" = artery
		      "akka.protobuf.GeneratedMessage" = proto
		      "com.google.protobuf.GeneratedMessage" = proto	      
		      "java.util.Optional" = akka-misc
		      "akka.remote.RemoteScope" = java
		    }
		    
		    additional-serialization-bindings {
		      "akka.actor.Identify" = akka-misc
		      "akka.actor.ActorIdentity" = akka-misc
		      "scala.Some" = akka-misc
		      "scala.None$" = akka-misc
		      "akka.actor.Status$Success" = akka-misc
		      "akka.actor.Status$Failure" = akka-misc
		      "akka.actor.ActorRef" = akka-misc
		      "akka.actor.PoisonPill$" = akka-misc
		      "akka.actor.Kill$" = akka-misc
		      "akka.remote.RemoteWatcher$Heartbeat$" = akka-misc
		      "akka.remote.RemoteWatcher$HeartbeatRsp" = akka-misc
		      "akka.actor.ActorInitializationException" = akka-misc
		
		      "akka.dispatch.sysmsg.SystemMessage" = akka-system-msg
		
		      "java.lang.String" = primitive-string
		      "akka.util.ByteString$ByteString1C" = primitive-bytestring
		      "akka.util.ByteString$ByteString1" = primitive-bytestring
		      "akka.util.ByteString$ByteStrings" = primitive-bytestring
		      "java.lang.Long" = primitive-long
		      "scala.Long" = primitive-long
		      "java.lang.Integer" = primitive-int
		      "scala.Int" = primitive-int
		
		      "java.lang.Throwable" = java
		      "akka.actor.IllegalActorStateException" = akka-misc
		      "akka.actor.ActorKilledException" = akka-misc
		      "akka.actor.InvalidActorNameException" = akka-misc
		      "akka.actor.InvalidMessageException" = akka-misc
		
		      "akka.actor.LocalScope$" = akka-misc
		      "akka.remote.RemoteScope" = akka-misc
		
		      "com.typesafe.config.impl.SimpleConfig" = akka-misc
		      "com.typesafe.config.Config" = akka-misc
		
		      "akka.routing.FromConfig" = akka-misc
		      "akka.routing.DefaultResizer" = akka-misc
		      "akka.remote.routing.RemoteRouterConfig" = akka-misc
		    }
		
		    serialization-identifiers {
		      "akka.remote.serialization.ProtobufSerializer" = 2
		      "akka.remote.serialization.DaemonMsgCreateSerializer" = 3
			   "akka.cluster.protobuf.ClusterMessageSerializer" = 5      
		      "akka.remote.serialization.MessageContainerSerializer" = 6
		      "akka.remote.serialization.MiscMessageSerializer" = 16
		      "akka.remote.serialization.ArteryMessageSerializer" = 17
		      "akka.remote.serialization.LongSerializer" = 18
		      "akka.remote.serialization.IntSerializer" = 19
		      "akka.remote.serialization.StringSerializer" = 20
		      "akka.remote.serialization.ByteStringSerializer" = 21
		      "akka.remote.serialization.SystemMessageSerializer" = 22
		    }	

		    # see http://doc.akka.io/docs/akka/2.4/scala/remoting-artery.html#Remoting_S
		    deployment {
		  	  /myRouter/singleton/workerRouter {
		  		  pool-dispatcher { //only for routees
	      			  fork-join-executor.parallelism-min = 5
	      			  fork-join-executor.parallelism-max = 5
	    		      } 		  	
		  	  }
		  	}		  	      
	}


	remote {	 
	 	# trusted mode
	 	untrusted-mode = off
     	watch-failure-detector {
			threshold = 10
			acceptable-heartbeat-pause = 10s
			heartbeat-interval = 1s
			expected-response-after = 1s
		}	  			
     	
	  artery {
	    enabled = on
	    advanced {
	        flight-recorder {
	          #enabled = on
	          #destination = "/tmp/cosbench_ng/akka-flight-recorder-slave.afr"
	        }
	    }           	    
	  }
	}


	cluster {
	  metrics.enabled = off
	  use-dispatcher = Slave.akka.cluster-dispatcher
	  auto-down-unreachable-after = 10s
	  roles =["slave"]

	  failure-detector {
	     threshold = 12.0 
	     # for AWS deployments
	  } 
	  allow-weakly-up-members = on

	  # Protobuf serializer for cluster messages
	  actor {
	    serializers {
	      akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
	    }	
	    serialization-bindings {
	      "akka.cluster.ClusterMessage" = akka-cluster
	      "akka.cluster.routing.ClusterRouterPool" = akka-cluster
	    }
	    
	    serialization-identifiers {
	      "akka.cluster.protobuf.ClusterMessageSerializer" = 5
	    }
	  }	  	  
	}
	
	cluster-dispatcher {
		type = "Dispatcher"
  		executor = "fork-join-executor"
  		fork-join-executor {
    		   parallelism-min = 2
    		   parallelism-max = 4
  		}
	}
	  	  				
}
}